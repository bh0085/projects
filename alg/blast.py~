import Bio.SeqIO as SeqIO
import Bio.Seq as seq
import Bio.Alphabet as Alphabet
import Bio.Align as al
import Bio.AlignIO as aio
import Bio.SeqRecord as sr

import os
import cb.config as cfg
temp_dir = cfg.dataPath('alg')
if not os.path.isdir(temp_dir):
    os.mkdir(temp_dir)
import subprocess as spc

def writelines(lines,gid):
    ali = al.MultipleSeqAlignment([sr.SeqRecord(seq.Seq(''.join(line)),
                                                '{1}{0}i'.format(i,gid),
                                                description = '{1}{0}d'.format(i,gid)
                                                ) 
                                   for i, line in enumerate(lines[:10])])
    return ali
    
def write_fa(lines, gid):
    fpath = os.path.join(temp_dir, '{0}_seqlines.fa'.format(gid))
    fopen = open(fpath,'w')
    alignment = writelines(lines,gid)
    SeqIO.write(alignment,fopen,'fasta')
    fopen.close()
    return fpath

def make_db(fpaths, prefix):
    '''makeblastdb -in good_proteins.fasta -dbtype prot -out my_prot_blast_db'''

    path = os.path.split(fpaths[0])[0]
    fnames = [ os.path.split(fp)[1] for fp in fpaths]
    cmd =  'formatdb -i "{0}" -p T -o T -n {1} '.format(' '.join(fnames),    prefix)
    prc = spc.Popen(cmd, 
                    shell = True,
                    cwd = path,
                    stdout = spc.PIPE)
    out =  prc.stdout.read()
    return out

def query_db(fpath):
    '''blastp -db my_prot_blast_db -query good_proteins.fasta 
    -outfmt 6 -out all-vs-all.tsv'''
    
    path,fname = os.path.split(fpath)
    prefix = '.'.join(os.path.splitext(fname)[:-1])
    cmd = '''blast -p blastp -d {1} -i {0} -m 0 -o {0}.out'''\
        .format(fname,  prefix)
    prc = spc.Popen(cmd, 
                    shell = True,
                    cwd = path,
                    stdout = spc.PIPE)
    out = prc.stdout.read()
    return out

