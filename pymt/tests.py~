#!/usr/bin/env python

# Import libraries
import time
import hmac
import sha
import base64
import urllib
import xml.dom.minidom

# Define constants
AWS_ACCESS_KEY_ID = 'AKIAJJ66HQR34VAUE3DQ'
AWS_SECRET_ACCESS_KEY = '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'
SERVICE_NAME = 'AWSMechanicalTurkRequester'
SERVICE_VERSION = '2007-03-12'

# Define authentication routines
def generate_timestamp(gmtime):
    return time.strftime("%Y-%m-%dT%H:%M:%SZ", gmtime)

def generate_signature(service, operation, timestamp, secret_access_key):
    my_sha_hmac = hmac.new(secret_access_key, service + operation + timestamp, sha)
    my_b64_hmac_digest = base64.encodestring(my_sha_hmac.digest()).strip()
    return my_b64_hmac_digest

def acct():
  # Calculate the request authentication parameters
  operation = 'GetAccountBalance'
  timestamp = generate_timestamp(time.gmtime())
  signature = generate_signature('AWSMechanicalTurkRequester', operation, timestamp, AWS_SECRET_ACCESS_KEY)
  
  # Construct the request
  parameters = {
      'Service': SERVICE_NAME,
      'Version': SERVICE_VERSION,
      'AWSAccessKeyId': AWS_ACCESS_KEY_ID,
      'Timestamp': timestamp,
      'Signature': signature,
      'Operation': operation,
      }
  
  # Make the request
  url = 'http://mechanicalturk.amazonaws.com/onca/xml?'
  result_xmlstr = urllib.urlopen(url, urllib.urlencode(parameters)).read()
  result_xml = xml.dom.minidom.parseString(result_xmlstr)
  
  # Check for and print results and errors
  errors_nodes = result_xml.getElementsByTagName('Errors')
  if errors_nodes:
      print 'There was an error processing your request:'
      for errors_node in errors_nodes:
  	for error_node in errors_node.getElementsByTagName('Error'):
  	    print '  Error code:    ' + error_node.getElementsByTagName('Code')[0].childNodes[0].data
  	    print '  Error message: ' + error_node.getElementsByTagName('Message')[0].childNodes[0].data
  
  availbalance_nodes = result_xml.getElementsByTagName('AvailableBalance')
  if availbalance_nodes:
      print "Available balance: " + availbalance_nodes[0].getElementsByTagName('FormattedPrice')[0].childNodes[0].data

def get_help():
  # Calculate the request authentication parameters
  operation = 'Help'
  timestamp = generate_timestamp(time.gmtime())
  signature = generate_signature('AWSMechanicalTurkRequester', operation, timestamp, AWS_SECRET_ACCESS_KEY)
  
  # Construct the request
  parameters = {
      'Service': SERVICE_NAME,
      'Version': SERVICE_VERSION,
      'AWSAccessKeyId': AWS_ACCESS_KEY_ID,
      'Timestamp': timestamp,
      'Signature': signature,
      'Operation': operation,
      }
  
  # Make the request
  url = 'http://mechanicalturk.amazonaws.com/onca/xml?'
  result_xmlstr = urllib.urlopen(url, urllib.urlencode(parameters)).read()
  result_xml = xml.dom.minidom.parseString(result_xmlstr)
  
  # Check for and print results and errors
  errors_nodes = result_xml.getElementsByTagName('Errors')
  if errors_nodes:
      print 'There was an error processing your request:'
      for errors_node in errors_nodes:
  	for error_node in errors_node.getElementsByTagName('Error'):
  	    print '  Error code:    ' + error_node.getElementsByTagName('Code')[0].childNodes[0].data
  	    print '  Error message: ' + error_node.getElementsByTagName('Message')[0].childNodes[0].data
  
  nodes = result_xml.getElements()

  raise Exception()
  availbalance_nodes = result_xml.getElementsByTagName('AvailableBalance')
  if availbalance_nodes:
      print "Available balance: " + availbalance_nodes[0].getElementsByTagName('FormattedPrice')[0].childNodes[0].data

if __name__ == '__main__':
  import sys
  args = sys.argv[1:]
  if len(args) == 0:
    get_help()
  else:
    if args[0] == 'balance': acct()
    print 'sorry no args are yet implemented'
